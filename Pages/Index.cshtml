@page
@model IndexModel
@{
    Layout = null;
    bool isAuthenticated = User.Identity?.IsAuthenticated ?? false;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WeatherApp</title>
    <link rel="stylesheet" href="/css/output.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="/js/main.js" defer></script>
    <style>
        .scrollable-forecast {
            height: 600px;
            overflow-y: auto;
        }
        
        #map {
            width: 100%;
            height: 400px;
            margin-top: 20px;
            border: 2px solid #ccc;
            border-radius: 10px;
        }

        .chat-container {
            height: 400px;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }
        
        .chat-input-container {
            position: relative;
            padding-bottom: 12px;
            overflow-y: fixed;
        }

        .chat-input {
            padding-right: 3rem;
        }

        .send-button {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
        }

        .scrollable-forecast .forecast-item img {
            width: 40px;
            height: 40px;
        }

        #weather-data img {
            width: 50px;
            height: 50px;
        }

        .chat-message {
            padding: 0.75rem;
            border-radius: 0.5rem;
            margin-bottom: 0.75rem;
            max-width: 75%;
        }

        .chat-message.user {
            background-color: #dbeafe;
            margin-left: auto;
        }

        .chat-message.assistant {
            background-color: #f3f4f6;
        }
        /* Mobile Styles */
        @@media (max-width: 768px) {
            .grid.grid-cols-2 {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }

            #map {
                height: 300px;
                margin-top: 1rem;
            }

            .scrollable-forecast {
                height: 400px;
                padding: 0.5rem;
            }

            .chat-container {
                height: 350px;
                padding: 1rem;
            }

            .chat-message {
                max-width: 90%;
                padding: 0.5rem;
                font-size: 0.9rem;
            }

            .main-section {
                padding: 0 1rem;
            }

            .card {
                margin: 1rem 0;
                padding: 1rem;
            }

            #weather-data {
                flex-direction: column;
                text-align: center;
            }

            #weather-data img {
                margin: 0 auto 1rem;
            }

            .forecast-item {
                margin: 0.5rem 0;
                padding: 0.8rem;
            }

            .chat-input-container {
                padding: 0 0.5rem 0.5rem;
            }

            .chat-input {
                padding-right: 2.5rem;
                font-size: 0.9rem;
            }

            .send-button {
                right: 5px;
                padding: 0.3rem;
            }

            h1.text-4xl {
                font-size: 2rem;
                margin-bottom: 1rem;
            }

            h2.text-2xl {
                font-size: 1.5rem;
            }

            .header nav {
                padding: 0.5rem;
            }

            .header nav a {
                padding: 0.25rem 0.5rem;
                font-size: 0.9rem;
            }

            .footer-content {
                padding: 1rem;
                flex-direction: column;
                text-align: center;
            }

            .footer-section {
                margin: 0.5rem 0;
            }

            #coordinates {
                font-size: 0.9rem;
            }
        }
    </style>
    <script>
        const weatherApiKey = "ADD_API_KEY";
        const openAiKey = "ADD_API_KEY";

        let currentWeatherData = null;
        let currentMarker = null;
        let map;

        document.addEventListener("DOMContentLoaded", () => {
            // Initialize the map
            map = L.map('map').setView([46.0, 25.0], 6);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            // Add weather layers
            const weatherLayers = {
                "Clouds": L.tileLayer('https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=' + weatherApiKey, {
                    attribution: '© OpenWeatherMap'
                }),
                "Precipitation": L.tileLayer('https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=' + weatherApiKey, {
                    attribution: '© OpenWeatherMap'
                }),
                "Wind": L.tileLayer('https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=' + weatherApiKey, {
                    attribution: '© OpenWeatherMap'
                }),
                "Temperature": L.tileLayer('https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png?appid=' + weatherApiKey, {
                    attribution: '© OpenWeatherMap'
                }),
                "Pressure": L.tileLayer('https://tile.openweathermap.org/map/pressure_new/{z}/{x}/{y}.png?appid=' + weatherApiKey, {
                    attribution: '© OpenWeatherMap'
                })
            };

            L.control.layers({}, weatherLayers).addTo(map);

            // Handle map clicks
            map.on('click', async (e) => {
                const { lat, lng } = e.latlng;

                if (currentMarker) {
                    currentMarker.setLatLng([lat, lng]);
                } else {
                    currentMarker = L.marker([lat, lng]).addTo(map);
                }

                document.getElementById('latitude').textContent = lat.toFixed(6);
                document.getElementById('longitude').textContent = lng.toFixed(6);

                await updateWeatherData(lat, lng);
                await updateForecastData(lat, lng);
            });

            // Initialize weather data
            updateWeatherData(46.0, 25.0);
            updateForecastData(46.0, 25.0);

            // Chat handling
            const chatInput = document.getElementById("chat-input");
            const chatMessages = document.getElementById("chat-messages");

            if (!chatInput || !chatMessages) {
                console.error("Chat elements not found!");
                return;
            }

            function addChatMessage(role, content) {
                if (!chatMessages) return;

                const messageDiv = document.createElement("div");
                messageDiv.className = `chat-message ${role} p-3 rounded-lg ${
                    role === "user" ? "bg-blue-100 ml-auto" : "bg-gray-100"
                } max-w-3/4 mb-3`;
                messageDiv.textContent = content;
                chatMessages.appendChild(messageDiv);

                // Auto-scroll to the bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            async function processChatMessage(message, weatherData, location) {
                try {
                    if (!weatherData) {
                        console.warn("Weather data is not available. Fetching...");
                        addChatMessage("assistant", "Fetching weather data, please wait...");
                        await updateWeatherData(location.lat, location.lng);
                        weatherData = currentWeatherData;
                    }

                    console.log("Processing message:", message);
                    console.log("Weather Data:", weatherData);
                    console.log("Location:", location);

                    const response = await fetch("https://api.openai.com/v1/chat/completions", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Authorization: `Bearer ${openAiKey}`,
                        },
                        body: JSON.stringify({
                            model: "gpt-3.5-turbo",
                            messages: [
                                {
                                    role: "system",
                                    content: "You are a weather assistant. Use the provided location and weather data to answer user queries accurately.",
                                },
                                {
                                    role: "user",
                                    content: `
Current Location: ${location.lat.toFixed(6)}, ${location.lng.toFixed(6)}
Weather Data: ${JSON.stringify(weatherData, null, 2)}
User Query: ${message}
                                    `,
                                },
                            ],
                        }),
                    });

                    if (!response.ok) {
                        console.error("GPT API Response:", await response.json());
                        throw new Error(`Chat API request failed with status ${response.status}`);
                    }

                    const data = await response.json();
                    console.log("GPT Response:", data);
                    return data.choices?.[0]?.message?.content?.trim() || "I couldn't process your request.";
                } catch (error) {
                    console.error("Chatbot error:", error);
                    return "I'm sorry, I couldn't process your request at the moment.";
                }
            }

            // Event listener for chat input
            chatInput.addEventListener("keypress", async (e) => {
                if (e.key === "Enter") {
                    const message = chatInput.value.trim();
                    if (!message) return;

                    chatInput.value = "";
                    addChatMessage("user", message);

                    // Determine current location
                    const location = currentMarker ? currentMarker.getLatLng() : { lat: 46.0, lng: 25.0 };

                    // Ensure weather data is available
                    if (!currentWeatherData) {
                        addChatMessage("assistant", "Fetching weather data, please wait...");
                        await updateWeatherData(location.lat, location.lng);
                    }

                    // Process message and add assistant response
                    const response = await processChatMessage(message, currentWeatherData, location);
                    addChatMessage("assistant", response);
                }
            });

            // Event listener for send button
            document.querySelector('.send-button').addEventListener('click', async () => {
                const message = chatInput.value.trim();
                if (!message) return;

                chatInput.value = "";
                addChatMessage("user", message);

                const location = currentMarker ? currentMarker.getLatLng() : { lat: 46.0, lng: 25.0 };

                if (!currentWeatherData) {
                    addChatMessage("assistant", "Fetching weather data, please wait...");
                    await updateWeatherData(location.lat, location.lng);
                }

                const response = await processChatMessage(message, currentWeatherData, location);
                addChatMessage("assistant", response);
            });
        });

        async function updateWeatherData(lat, lng) {
            try {
                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${weatherApiKey}&units=metric`
                );

                if (!response.ok) {
                    throw new Error("Failed to fetch weather data.");
                }

                const data = await response.json();
                console.log("Weather Data:", data);
                currentWeatherData = data;

                const weatherElement = document.getElementById("weather-data");
                if (weatherElement) {
                    weatherElement.innerHTML = `
                        <div class="flex items-center space-x-4">
                            <img src="https://openweathermap.org/img/wn/${data.weather[0].icon}.png" alt="${data.weather[0].description}">
                            <div>
                                <p><strong>Temperature:</strong> ${data.main.temp}°C</p>
                                <p><strong>Condition:</strong> ${data.weather[0].description}</p>
                                <p><strong>Wind Speed:</strong> ${data.wind.speed} m/s</p>
                                <p><strong>Humidity:</strong> ${data.main.humidity}%</p>
                            </div>
                        </div>
                    `;
                }
            } catch (error) {
                console.error("Weather API error:", error);
                showError("Unable to fetch weather data.");
            }
        }

        async function updateForecastData(lat, lng) {
            try {
                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lng}&appid=${weatherApiKey}&units=metric`
                );

                if (!response.ok) {
                    throw new Error("Failed to fetch forecast data.");
                }

                const data = await response.json();
                console.log("Forecast Data:", data);

                const forecastElement = document.getElementById("forecast");
                if (forecastElement) {
                    let forecastHTML = "";
                    data.list.forEach((item, index) => {
                        if (index % 8 === 0) {
                            forecastHTML += `
                                <div class="forecast-item bg-gray-50 p-4 rounded-lg shadow-sm">
                                    <p class="text-lg font-semibold">${new Date(item.dt * 1000).toLocaleDateString()}</p>
                                    <img src="https://openweathermap.org/img/wn/${item.weather[0].icon}.png" alt="${item.weather[0].description}">
                                    <p><strong>Temp:</strong> ${item.main.temp}°C</p>
                                    <p><strong>Condition:</strong> ${item.weather[0].description}</p>
                                    <p><strong>Wind:</strong> ${item.wind.speed} m/s</p>
                                    <p><strong>Humidity:</strong> ${item.main.humidity}%</p>
                                </div>
                            `;
                        }
                    });
                    forecastElement.innerHTML = forecastHTML;
                }
            } catch (error) {
                console.error("Forecast API error:", error);
                showError("Unable to fetch forecast data.");
            }
        }

        function showError(message) {
            const errorElement = document.createElement("div");
            errorElement.className = "bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg";
            errorElement.textContent = message;
            document.body.appendChild(errorElement);
            setTimeout(() => errorElement.remove(), 5000);
        }
    </script>
</head>
<body class="bg-gray-100 flex flex-col min-h-screen">
    @await Html.PartialAsync("_Header")

    <main class="container mx-auto px-4 py-12">
        @if (isAuthenticated)
        {
            <h1 class="text-4xl font-bold text-blue-600 mb-6">Welcome back, @(User.Identity?.Name ?? "Guest")!</h1>
            
            <div class="grid grid-cols-2 gap-6">
                <div class="bg-white rounded-lg shadow-lg p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Weather Map</h2>
                    <div id="map"></div>
                    <p id="coordinates" class="text-gray-600 mt-4">
                        Latitude: <span id="latitude">Select Location...</span>, Longitude: <span id="longitude">Select Location...</span>
                    </p>
                </div>

                <div class="bg-white rounded-lg shadow-lg p-6 scrollable-forecast">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">5-Day Forecast</h2>
                    <div id="forecast" class="space-y-4">
                        <div class="animate-pulse">Loading forecast...</div>
                    </div>
                </div>

                <div class="col-span-2 bg-white rounded-lg shadow-lg p-6 chat-container">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Weather Assistant</h2>
                    <div class="flex flex-col flex-grow">
                        <div id="chat-messages" class="flex-1 overflow-y-auto mb-4 space-y-3 p-4 bg-gray-50 rounded-lg">
                            <div class="chat-message assistant bg-gray-100 p-3 rounded-lg">
                                Hello! I'm your weather assistant. Ask me anything about the weather or your saved locations!
                            </div>
                        </div>
                        <div class="chat-input-container">
                            <input type="text" id="chat-input" class="chat-input w-full p-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="Ask about the weather...">
                            <button class="send-button text-blue-500 hover:text-blue-600">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        } 
        else 
        {
            <div class="main-section">
                <div class="relative bg-gray-50 shadow-lg rounded p-6 border border-gray-200">
                    <h2 class="text-xl font-bold text-gray-700 mb-4">Your Current Location</h2>
                    <div id="map"></div>
                    <p id="coordinates" class="text-gray-600 mt-4">
                        Latitude: <span id="latitude">Loading...</span>, Longitude: <span id="longitude">Loading...</span>
                    </p>
                    <p class="text-gray-600 mt-4">
                        <strong>Available Weather Layers:</strong>
                        <br>
                        Use the toggle control on the map to switch between <em>Clouds</em>, <em>Precipitation</em>, <em>Wind</em>, <em>Temperature</em>, and <em>Pressure</em>.
                    </p>
                </div>
                <div class="card bg-white rounded-lg shadow-lg p-6 mt-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Current Weather</h2>
                    <div id="weather-data" class="flex items-center space-x-4">
                        <div class="animate-pulse">Loading weather data...</div>
                    </div>
                </div>
            </div>
        }
    </main>

    @await Html.PartialAsync("_Footer")
</body>
</html>